generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id            String   @id
  role          UserRole
  email         String   @unique
  contactNumber String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique
  admin         Admin?
  student       Student?
  tutor         Tutor?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Student {
  id            String       @id
  fullName      String
  grade         String
  subjects      String[]
  learningMode  TeachingMode
  location      String?
  learningGoals String?
  parentName    String?
  parentPhone   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  profile       Profile      @relation(fields: [id], references: [id])
}

model Tutor {
  id                           String       @id
  firstName                    String
  lastName                     String
  gender                       GenderType
  dateOfBirth                  DateTime
  subjects                     String[]
  customSubjects               String[]     @default([])
  qualification                String
  experience                   String
  teachingMode                 TeachingMode
  location                     String?
  availability                 String[]
  hourlyRate                   Decimal      @db.Decimal(10, 2)
  bio                          String
  idProofUrl                   String
  qualificationCertificatesUrl String[]
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  profile                      Profile      @relation(fields: [id], references: [id])
}

model Admin {
  id            String   @id
  email         String   @unique
  contactNumber String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profile       Profile  @relation(fields: [id], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Resource {
  id           String   @id @default(cuid())
  title        String
  type         String
  subject      String
  grade        String
  description  String
  fileUrl      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([uploadedById])
  @@map("resources")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  profile       Profile?
  resources     Resource[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  USER
  ADMIN
}

enum TeachingMode {
  ONLINE
  OFFLINE
  BOTH
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

model ParentContact {
  id                    String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  parentName           String
  parentOccupation     String
  phoneNumber          String
  discountCode         String?
  studentDetails       String
  schoolName           String
  previousMarks        String?
  subjects            String[]
  challenges          String?
  preferredTimeSlot    String
  sessionsPerWeek      Int
  classMode            String
  tutorGenderPreference String
  tutorGoals           String
  address              String
  city                 String
  status              String   @default("pending")

  @@map("parent_contacts")
}

model TutorContact {
  id                   String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  name                String
  age                 Int
  currentOccupation   String
  phoneNumber         String
  email               String
  tenthPercentage     Float
  tenthBoard          String
  twelfthPercentage   Float
  twelfthBoard        String
  hasTeachingExperience Boolean
  hasSchoolExperience  Boolean
  maxClassLevel       String
  subjects            String[]
  teachingPreference  String
  currentAddress      String
  city                String
  state               String
  status              String   @default("pending")

  @@map("tutor_contacts")
}
